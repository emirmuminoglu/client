// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package client

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
	fasthttp "github.com/valyala/fasthttp"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson1b4e3509DecodeGithubComEmirmuminogluClient(in *jlexer.Lexer, out *cookies) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(cookies, 0, 0)
			} else {
				*out = cookies{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 cookie
			easyjson1b4e3509DecodeGithubComEmirmuminogluClient1(in, &v1)
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1b4e3509EncodeGithubComEmirmuminogluClient(out *jwriter.Writer, in cookies) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			easyjson1b4e3509EncodeGithubComEmirmuminogluClient1(out, v3)
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v cookies) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson1b4e3509EncodeGithubComEmirmuminogluClient(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v cookies) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson1b4e3509EncodeGithubComEmirmuminogluClient(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *cookies) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson1b4e3509DecodeGithubComEmirmuminogluClient(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *cookies) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson1b4e3509DecodeGithubComEmirmuminogluClient(l, v)
}
func easyjson1b4e3509DecodeGithubComEmirmuminogluClient1(in *jlexer.Lexer, out *cookie) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "key":
			out.Key = string(in.String())
		case "value":
			out.Value = string(in.String())
		case "time":
			out.Expire = string(in.String())
		case "max_age":
			out.MaxAge = int(in.Int())
		case "domain":
			out.Domain = string(in.String())
		case "path":
			out.Path = string(in.String())
		case "http_only":
			out.HTTPOnly = bool(in.Bool())
		case "secure":
			out.Secure = bool(in.Bool())
		case "same_site":
			out.SameSite = fasthttp.CookieSameSite(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson1b4e3509EncodeGithubComEmirmuminogluClient1(out *jwriter.Writer, in cookie) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"key\":"
		out.RawString(prefix[1:])
		out.String(string(in.Key))
	}
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		out.String(string(in.Value))
	}
	{
		const prefix string = ",\"time\":"
		out.RawString(prefix)
		out.String(string(in.Expire))
	}
	{
		const prefix string = ",\"max_age\":"
		out.RawString(prefix)
		out.Int(int(in.MaxAge))
	}
	{
		const prefix string = ",\"domain\":"
		out.RawString(prefix)
		out.String(string(in.Domain))
	}
	{
		const prefix string = ",\"path\":"
		out.RawString(prefix)
		out.String(string(in.Path))
	}
	{
		const prefix string = ",\"http_only\":"
		out.RawString(prefix)
		out.Bool(bool(in.HTTPOnly))
	}
	{
		const prefix string = ",\"secure\":"
		out.RawString(prefix)
		out.Bool(bool(in.Secure))
	}
	{
		const prefix string = ",\"same_site\":"
		out.RawString(prefix)
		out.Int(int(in.SameSite))
	}
	out.RawByte('}')
}
